{"version":3,"sources":["components/Pagination/Pagination.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx"],"names":["Pagination","total","perPage","currentPage","setCurrentPage","withInfo","useState","active","setActive","prevActive","setPrevActive","nextActive","setNextActive","pages","useMemo","result","pagesAmount","Math","ceil","i","push","shift","vector","useEffect","length","className","type","onClick","disabled","map","page","classNames","Settings","totalElements","setTotalElements","elementsPerPage","setElementsPerPage","setWithInfo","defaultValue","min","onChange","event","target","value","name","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8f1a650.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport './Pagination.scss';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  setCurrentPage: (currentPage: number) => void;\n  withInfo: boolean;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  setCurrentPage,\n  withInfo,\n}) => {\n  const [active, setActive] = useState<number>(currentPage);\n  const [prevActive, setPrevActive] = useState<boolean>(true);\n  const [nextActive, setNextActive] = useState<boolean>(true);\n\n  const pages: number[] = useMemo(() => {\n    const result = [];\n    const pagesAmount = Math.ceil(total / perPage);\n\n    for (let i = 1; i <= pagesAmount; i += 1) {\n      result.push(i);\n    }\n\n    return result;\n  }, [total, perPage]);\n\n  const shift = (vector: string) => {\n    if (vector === 'left') {\n      setCurrentPage(currentPage - 1);\n      setActive(currentPage - 1);\n    } else {\n      setCurrentPage(currentPage + 1);\n      setActive(currentPage + 1);\n    }\n  };\n\n  useEffect(() => {\n    if (currentPage === 1) {\n      setPrevActive(false);\n    } else {\n      setPrevActive(true);\n    }\n\n    if (currentPage === pages.length) {\n      setNextActive(false);\n    } else {\n      setNextActive(true);\n    }\n  });\n\n  const withInfoData = () => {\n    return `${perPage * (currentPage - 1) + 1} - ${currentPage * perPage > total\n      ? total\n      : currentPage * perPage\n    } of ${total}`;\n  };\n\n  return (\n    <div>\n      <ul>\n        <li>\n          {`Total elements: ${total}`}\n        </li>\n        <li>\n          {`Elements per page: ${perPage}`}\n        </li>\n        <li>\n          {`Current page: ${currentPage}`}\n        </li>\n      </ul>\n\n      {withInfo ? withInfoData() : ''}\n\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => shift('left')}\n          disabled={!prevActive}\n        >\n          &laquo;\n        </button>\n        {pages.map(page => (\n          <button\n            type=\"button\"\n            key={page}\n            className={classNames(\n              'button',\n              { active: active === page },\n            )}\n            onClick={() => {\n              setCurrentPage(page);\n              setActive(page);\n            }}\n          >\n            {page}\n          </button>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => shift('right')}\n          disabled={!nextActive}\n        >\n          &raquo;\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  totalElements: number;\n  setTotalElements: (totalElements: number) => void;\n  elementsPerPage: number;\n  setElementsPerPage: (elementsPerPage: number) => void;\n  withInfo: boolean;\n  setWithInfo: (withInfo: boolean) => void;\n};\n\nexport const Settings: React.FC<Props> = ({\n  totalElements,\n  setTotalElements,\n  elementsPerPage,\n  setElementsPerPage,\n  withInfo,\n  setWithInfo,\n}) => {\n  return (\n    <div>\n      <h2>Settings</h2>\n      <div>\n        <span>Set total amount elements: </span>\n        <input\n          type=\"number\"\n          defaultValue={totalElements}\n          min={1}\n          onChange={(event) => setTotalElements(+event.target.value)}\n        />\n      </div>\n      <div>\n        <span>Set amount elements per page: </span>\n        <select\n          name=\"elementsPerPage\"\n          value={elementsPerPage}\n          onChange={(event) => setElementsPerPage(+event.target.value)}\n        >\n          <option value={3}>3</option>\n          <option value={5}>5</option>\n          <option value={10}>10</option>\n          <option value={20}>20</option>\n        </select>\n      </div>\n\n      <div>\n        <span>Set with info: </span>\n        <select\n          name=\"setWithInfo\"\n          value={withInfo === true ? 'true' : 'false'}\n          onChange={(event) => {\n            if (event.target.value === 'true') {\n              return setWithInfo(true);\n            }\n\n            return setWithInfo(false);\n          }}\n        >\n          <option value=\"true\">True</option>\n          <option value=\"false\">False</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination/Pagination';\nimport { Settings } from './components/Settings/Settings';\n\nconst App: React.FC = () => {\n  const [totalElements, setTotalElements] = useState<number>(42);\n  const [elementsPerPage, setElementsPerPage] = useState<number>(5);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [withInfo, setWithInfo] = useState<boolean>(true);\n\n  return (\n    <div className=\"App\">\n      <h1>Pagination</h1>\n      <Pagination\n        total={totalElements}\n        perPage={elementsPerPage}\n        currentPage={currentPage}\n        setCurrentPage={setCurrentPage}\n        withInfo={withInfo}\n      />\n      <Settings\n        totalElements={totalElements}\n        setTotalElements={setTotalElements}\n        elementsPerPage={elementsPerPage}\n        setElementsPerPage={setElementsPerPage}\n        withInfo={withInfo}\n        setWithInfo={setWithInfo}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}